/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package http4k.form.sam.aws

import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent
import com.fasterxml.jackson.databind.JsonNode
import org.http4k.client.ApacheClient
import org.http4k.core.*
import org.http4k.format.Jackson.json

import org.http4k.core.Status.Companion.OK
import org.http4k.server.SunHttp
import org.http4k.server.asServer
import org.http4k.serverless.AppLoader
import org.http4k.serverless.LambdaFunction
import org.http4k.format.Jackson.auto
import org.http4k.core.Body
import org.http4k.format.Jackson

data class Message(val body:String)
val json = Jackson

var messageLens = Body.auto<Message>().toLens();
object FirstLambda : AppLoader {
    override fun invoke(env: Map<String, String>): HttpHandler = {



        var m= messageLens(it)

        println("He recibido " + m.body)
        val objectUsingDslApi: JsonNode = json {
            obj(
                    "thisIsAString" to string(m.body),
                    "thisIsANumber" to number(12345),
                    "thisIsAList" to array(listOf(boolean(true)))
            )
        }

        Response(OK).with(
                Body.json().toLens() of objectUsingDslApi
        )
    }
}

class App :LambdaFunction(FirstLambda)

fun main(args: Array<String>) {
    fun runLambdaLocally() {
        val app: HttpHandler = FirstLambda(mapOf())
        val localLambda = app.asServer(SunHttp(8000)).start()

        //     val response = ApacheClient()(Request(Method.POST, "http://localhost:8000/").body("hello hello hello, " +
        //              "i suppose this isn't 140 characters anymore.."))

        val myRequest: Message = Message("kiquetal");
        val messageLens = Body.auto<Message>().toLens()
        val response = ApacheClient()(Request(Method.POST, "http://localhost:8000/").with(
                messageLens of myRequest
        ));
        println(response)
        localLambda.stop()
    }

    // the following code is purely here for demonstration purposes, to explain exactly what is happening at AWS.
    fun runLambdaAsAwsWould() {
        val response = App().handle(APIGatewayProxyRequestEvent().apply {
            path = "/"
            body = "hello hello hello, i suppose this isn't 140 characters anymore.."
            httpMethod = "GET"
            headers = mapOf()
            queryStringParameters = mapOf()
        })
        println(response)
    }

    runLambdaLocally()
    //  runLambdaAsAwsWould()}
}
